[en]
{hello} = Hello！
{lang} = en
{pares_js} = Parsing the page ...
{target_url} = Target sites：
{pares_js_fini_1} = Page analysis completed,
{pares_js_fini_2} = JS files found
{downloading} = Downloading：
{have_it} = The corresponding file already exists：
{maybe_have_codesplit} = JS asynchronous loading is suspected to exist：
{get_codesplit} = Processing asynchronous code loading
{run_codesplit_s} = Successful extraction of the asynchronous JS file, number of withdrawals：
{check_codesplit_twice} = Brute force detecting ...
{check_codesplit_twice_fini_1} = End of brute force detection,
{check_codesplit_twice_fini_2} = JS files detected successfully
{check_js_fini} = The collection of the JS files is finished and the extraction of the API from the platform begins ...
{total_api_1} = successfully extracted
{total_api_2} = API path
{open_violent_input} = If or not to enable brute force extraction mode (input Y to enable)：
{total_api_auto} = Too few total APIs to extract and brute force extraction mode is automatically enabled：
{api_violent_file} = violent extraction of file：
{total_api_num} = End of extraction process, number of possible results for initial API extraction：
{response_start} = Target response status is being detected...
{response_end} = Target response status checked, vulnerability detection started...
{connect_s} = Network connectivity checked, current egress IP：
{connect_f} = The extranet connection failed, please check the current network status or proxy situation：
{risk_h} = High risk
{risk_m} = Medium risk
{risk_l} = Low risk
{risk_n} = No risk
{mode_simple} = Simple Version
{mode_adv} = Advanced Edition
{no_extra_cookies} = Cookies are not enabled：
{no_extra_head} = The additional head feature is not enabled：
{vuln_unauth_num} = Unauthorized Access Vulnerability：
{vuln_CORS_num} = Cors vulnerability：
{vuln_info_num} = Sensitive Information Disclosure Vulnerability：
{ge} =
{report_creat} = The test report is being generated...
{report_fini} = The report is generated!
{r_api_addr} = API address：
{r_api_js} = Associated JS address：
{r_api_res} = Response content：
{r_js_path} = JS address：
{r_js_des} = Leak description：
{r_js_detial} = Leaked content：
{r_vuln_unauth} = Unauthorized access vulnerability in interface (medium risk)
{r_vuln_unauth_maybe} = Unauthorized access vulnerability in interface (low risk, suspected)
{r_vuln_info} = file has a sensitive information leak (medium risk)
{r_api_r_js} = Associated JS：
{r_sug_unauth_1} = For unauthorized access vulnerability.
{r_sug_unauth_2} = For backend interfaces, ensure that all API interfaces go through the login controller first.
{r_sug_unauth_3} = No data is interacted with until user identity privileges are verified.
{r_sug_info_1} = For sensitive information disclosure vulnerabilities.
{r_sug_info_2} = Do not store plaintext passwords, test data, and other information in JS, and promptly troubleshoot and delete the corresponding content.
{r_sug_cors_1} = For CORS vulnerabilities.
{r_sug_cors_2} = Strictly determine if the source domain is in the whitelist, blacklisting is not recommended.
{r_sug_sqli_1} = For SQL injection vulnerabilities.
{r_sug_sqli_2} = Use precompiled SQL queries for database queries.
{r_sug_sqli_3} = The special characters that enter the database are escaped, or encoded.
{r_sug_upload_1} = For arbitrary file upload vulnerabilities.
{r_sug_upload_2} = The server uses a whitelist to check file extensions.
{r_sug_upload_3} = Set directory permissions restrictions to disable execution permissions for the upload directory.
{r_sug_upload_4} = It is recommended that you use an OSS static storage server to store files uploaded by users.
{r_sug_password_1} = For weak password vulnerabilities.
{r_sug_password_2} = Do not use common weak passwords as passwords.
{r_sug_password_3} = It is recommended to use a string containing a random value or a randomly generated string as the system password.
{r_sug_bac_1} = For horizontal override vulnerabilities.
{r_sug_bac_2} = Randomize ID fields that operate on IDs, such as user IDs and order IDs, when designing tables.
{r_sug_bac_3} = Strictly verify that the current user operation matches the current logged-in user's identity privileges.
{r_sug_g_1} = Comprehensive Security Reinforcement Recommendations.
{r_sug_g_2} = Equipped with professional web application security protection equipment to deal with mainstream web application security attacks from the Internet.
{r_sug_g_3} = Periodic professional security assessments to keep abreast of the security status of information systems.
{r_sug_g_4} = Establish an effective safety emergency process and conduct regular safety training for employees.
{r_sug_g_5} = Seeking a professional security service team or using a security crowdsourcing approach such as ThorSRC (Bountyteam China).
{r_sug_g_6} = Improve the security management system system and standardize the routine maintenance and use of information systems.
{r_get} = GET request
{r_post} = POST request
{r_l_h} = high risk
{r_l_m} = medium-risk
{r_l_l} = low risk
{r_vuln_maybe} = suspect
{js_split_n} = none.
{js_split_s} = asynchronous
{js_split_b} = blast.
{vuln_info} = Vulnerability details
{vuln_type} = Type of vulnerability
{vuln_level} = Vulnerability level
{vuln_path} = The address of the vulnerability.
{related_frag} = Related fragment
{r_type} = Request type
{api_detail} = API details
{api_name} = API name
{scaned_plat} = The platform being scanned.
{para_value} = Input parameter value
{scan_method} = The scan was done.
{scan_time} = scan mode, total elapsed time.
{s} = seconds.
{use} = Use
{ip_address} = as a scanned egress IP address
{co_discovery} = Total discovery
{effective_api} = a valid API interface.
{effective_js} = a related JS file.
{effective_vuln} = security hole
{extra_cookies} = Attach cookies as
{extra_head} = The additional header information is
{vuln_total_level} = As a result of this tool's analysis, the target platform has a security risk level of
{no_vuln} = No vulnerabilities.
{unauth_vuln} = Unauthorized Access Vulnerability
{info_vuln} = Sensitive information breach.
{info_vuln_type} = Sensitive information type
{password_vuln} = weak password vulnerability
{vuln_passWord_num} = Weak password vulnerability：
{r_vuln_passWord} = Weak password vulnerability (high risk) in interface.
{request_info} = The content of the request：
{request_head} = request header
{response_head} = response_head
{CORS_vuln} = CORS vulnerability
{r_vuln_CORS} = station has a CORS vulnerability (low risk).
{web_addr} = website
{r_vuln_bac} = Horizontal override vulnerability (medium risk).
{vuln_BAC_num} = number of horizontal override vulnerabilities
{respons_info} = response content
{BAC_vuln} = horizontal override vulnerability
{r_vuln_upload} = There is an arbitrary file upload vulnerability.
{upload_vuln} = arbitrary file upload vulnerability.
{vuln_upload_num} = Arbitrary file upload vulnerability：
{vuln_sql_num} = Number of SQL Injection Vulnerabilities
{r_vuln_sql} = SQL injection vulnerability (high risk).
{sql_vuln} = SQL Injection Vulnerability
{adv_start} = Entering advanced mode...
{beauty_js} = We're reworking the JS file...
{fuzzer_param} = Extracting API parameters, which may take longer...
{ext_start} = Extensions are enabled, running an add-on...
{ext_end} = Additional plug-ins have been fully executed...
{unauth_test} = Start detecting unauthorized access.
{info_test} = Start detecting sensitive information vulnerabilities.
{cors_test} = Start detecting CORS vulnerabilities.
{password_test} = Start detecting weak password vulnerabilities.
{upload_test} = Start detecting arbitrary file upload vulnerabilities.
{bac_test} = Start detecting horizontal override vulnerabilities.
{sql_test} = Start detecting SQL injection vulnerabilities.
{all_end} = All scans and inspections complete, the Packer Fuzzer team thanks you for using it!
{check_pack_s} = Congratulations, this site was most likely built through a front-end packer!
{check_pack_f} = Front-end packer feature not detected, or maybe an existing rule is insufficient...
{xhlj} = ༒ Exhibiting tools at China's CYBER SECURITY ARSENAL
{db_path} = Cache file path：
{log_path} = Log file path：
{base_dir_list} = Extract the following BaseDir：
{api_top5_list} = The first five API extraction results are：
{new_base_dir} = Inaccurate extraction detected, please enter a new BaseDir (separated by commas)：
{api_length} = Length